2025-08-07 10:21:37,685 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:21:37,704 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:21:37,934 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:21:37,935 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:21:38,127 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:21:38,127 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:21:38,352 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:21:38,353 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:21:38,624 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:21:39,023 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:21:39,023 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-08-07 10:21:39,076 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BC9141F0B0>
2025-08-07 10:21:39,076 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001BC9167C1D0> server_hostname='api.openai.com' timeout=None
2025-08-07 10:21:39,117 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BC9141EFC0>
2025-08-07 10:21:39,118 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:21:39,118 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:21:39,118 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:21:39,118 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:21:39,118 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:21:40,267 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:21:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1031'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1042'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29396'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.208s'), (b'x-request-id', b'req_300385cb287b485caf45ba2976190e2d'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Sep4mQ9eOvdq5icvwwhQgX5XRRvMZMyTvL2ulT.bC28-1754587299-1.0.1.1-TrrWgGabO9cpVSdTWXsAI6A5l0.n_5cjfAMQ1ia1HwrYA.5tFGC2MGRG.XtGvC5EhH0elhFI5O87ptE02COFqqHMHg9yRbCcu85ZTA5yAAU; path=/; expires=Thu, 07-Aug-25 17:51:39 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=evXC1k3Z6grFZh3p.js.MwZra_EiWlpL.THB1OoyGc8-1754587299372-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b87396294269be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:21:40,268 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:21:40,268 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:21:40,269 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:21:40,269 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:21:40,269 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:21:40,269 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Thu, 07 Aug 2025 17:21:39 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'hp61'), ('openai-processing-ms', '1031'), ('openai-project', 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1042'), ('x-ratelimit-limit-requests', '500'), ('x-ratelimit-limit-tokens', '30000'), ('x-ratelimit-remaining-requests', '499'), ('x-ratelimit-remaining-tokens', '29396'), ('x-ratelimit-reset-requests', '120ms'), ('x-ratelimit-reset-tokens', '1.208s'), ('x-request-id', 'req_300385cb287b485caf45ba2976190e2d'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Sep4mQ9eOvdq5icvwwhQgX5XRRvMZMyTvL2ulT.bC28-1754587299-1.0.1.1-TrrWgGabO9cpVSdTWXsAI6A5l0.n_5cjfAMQ1ia1HwrYA.5tFGC2MGRG.XtGvC5EhH0elhFI5O87ptE02COFqqHMHg9yRbCcu85ZTA5yAAU; path=/; expires=Thu, 07-Aug-25 17:51:39 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=evXC1k3Z6grFZh3p.js.MwZra_EiWlpL.THB1OoyGc8-1754587299372-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '96b87396294269be-LAX'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-08-07 10:21:40,270 - openai._base_client - DEBUG - request_id: req_300385cb287b485caf45ba2976190e2d
2025-08-07 10:21:40,281 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_NvqvhIf7CSOJOSEGn5J9nJor', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': 'Error: 1 validation error for extract_and_store_text_insights\nself\n  Field required [type=missing, input_value={\'user_id\': \'33a07e45-c5a...between 9 AM and 11 AM"}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing\n Please fix your mistakes.', 'role': 'tool', 'tool_call_id': 'call_NvqvhIf7CSOJOSEGn5J9nJor'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:21:40,282 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:21:40,282 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:21:40,283 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:21:40,283 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:21:40,283 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:21:40,283 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:21:42,211 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:21:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1731'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1802'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28578'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.843s'), (b'x-request-id', b'req_0c33d0c2d45247c4bb776e73e8648eb0'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8739d5ffc69be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:21:42,211 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:21:42,211 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:21:42,211 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:21:42,212 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:21:42,212 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:21:42,212 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:21:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1731', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1802', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28578', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.843s', 'x-request-id': 'req_0c33d0c2d45247c4bb776e73e8648eb0', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8739d5ffc69be-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:21:42,212 - openai._base_client - DEBUG - request_id: req_0c33d0c2d45247c4bb776e73e8648eb0
2025-08-07 10:21:42,218 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_NvqvhIf7CSOJOSEGn5J9nJor', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': 'Error: 1 validation error for extract_and_store_text_insights\nself\n  Field required [type=missing, input_value={\'user_id\': \'33a07e45-c5a...between 9 AM and 11 AM"}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing\n Please fix your mistakes.', 'role': 'tool', 'tool_call_id': 'call_NvqvhIf7CSOJOSEGn5J9nJor'}, {'content': 'It seems there was an error in processing your preferences. Let me try that again.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_E2UIJU4ZYoYLfQOTXgSNBnPB', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"self": {}, "user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': 'Error: TypeError("StructuredTool._run() got multiple values for argument \'self\'")\n Please fix your mistakes.', 'role': 'tool', 'tool_call_id': 'call_E2UIJU4ZYoYLfQOTXgSNBnPB'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:21:42,219 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:21:42,219 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:21:42,219 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:21:42,219 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:21:42,220 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:21:42,220 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:21:44,945 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:21:44 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2525'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2571'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28813'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.372s'), (b'x-request-id', b'req_9f422ca845064231bd52e345f3f710fb'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b873a96bb169be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:21:44,945 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:21:44,945 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:21:44,948 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:21:44,948 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:21:44,949 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:21:44,949 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:21:44 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2525', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2571', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28813', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.372s', 'x-request-id': 'req_9f422ca845064231bd52e345f3f710fb', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b873a96bb169be-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:21:44,949 - openai._base_client - DEBUG - request_id: req_9f422ca845064231bd52e345f3f710fb
2025-08-07 10:21:47,974 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:21:47,975 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:21:47,976 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:21:47,976 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:21:47,976 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:21:47,976 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:21:47,976 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:21:49,750 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:21:48 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1624'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1638'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29329'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.34s'), (b'x-request-id', b'req_40dd8e163b2e43cf8df5e513d1aba388'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b873cd6b8a69be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:21:49,750 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:21:49,750 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:21:49,751 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:21:49,751 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:21:49,751 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:21:49,751 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:21:48 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1624', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1638', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29329', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.34s', 'x-request-id': 'req_40dd8e163b2e43cf8df5e513d1aba388', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b873cd6b8a69be-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:21:49,751 - openai._base_client - DEBUG - request_id: req_40dd8e163b2e43cf8df5e513d1aba388
2025-08-07 10:21:49,759 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_beCLcUEZmaAQvYHCSK3GqUjQ', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': "Error: 1 validation error for schedule_with_pattern\nself\n  Field required [type=missing, input_value={'user_id': '33a07e45-c5a...00,2025-08-08T12:00:00'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_beCLcUEZmaAQvYHCSK3GqUjQ'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:21:49,760 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:21:49,760 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:21:49,760 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:21:49,761 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:21:49,761 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:21:49,761 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:21:52,001 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:21:51 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2113'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2127'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29326'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.348s'), (b'x-request-id', b'req_34c23fa095044f528394cef7584949b9'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b873d89dd769be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:21:52,001 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:21:52,001 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:21:52,001 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:21:52,001 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:21:52,001 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:21:52,002 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:21:51 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2113', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2127', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29326', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.348s', 'x-request-id': 'req_34c23fa095044f528394cef7584949b9', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b873d89dd769be-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:21:52,002 - openai._base_client - DEBUG - request_id: req_34c23fa095044f528394cef7584949b9
2025-08-07 10:21:52,008 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_beCLcUEZmaAQvYHCSK3GqUjQ', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': "Error: 1 validation error for schedule_with_pattern\nself\n  Field required [type=missing, input_value={'user_id': '33a07e45-c5a...00,2025-08-08T12:00:00'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_beCLcUEZmaAQvYHCSK3GqUjQ'}, {'content': 'It seems there was an issue with scheduling the deep work session. Let me correct that and try again.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_ygHs3RuGZo3GbBSKMaBxMP8g', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"self": null, "user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': 'Error: TypeError("StructuredTool._run() got multiple values for argument \'self\'")\n Please fix your mistakes.', 'role': 'tool', 'tool_call_id': 'call_ygHs3RuGZo3GbBSKMaBxMP8g'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:21:52,008 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:21:52,009 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:21:52,009 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:21:52,009 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:21:52,010 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:21:52,010 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:21:54,426 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:21:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2174'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2274'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29271'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.458s'), (b'x-request-id', b'req_9c9a6da204e54f4e89fb488ea6f33997'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b873e6a9ac69be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:21:54,426 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:21:54,426 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:21:54,427 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:21:54,427 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:21:54,427 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:21:54,427 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:21:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2174', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2274', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29271', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.458s', 'x-request-id': 'req_9c9a6da204e54f4e89fb488ea6f33997', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b873e6a9ac69be-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:21:54,427 - openai._base_client - DEBUG - request_id: req_9c9a6da204e54f4e89fb488ea6f33997
2025-08-07 10:21:57,454 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:21:57,455 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:21:57,455 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:21:57,456 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:21:57,456 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:21:57,456 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:21:57,456 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:22:00,860 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:21:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'3266'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3277'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29265'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.469s'), (b'x-request-id', b'req_19af5559ee5c49eb9fafe887120a10ae'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b87408a8d569be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:22:00,860 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:22:00,860 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:22:00,864 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:22:00,864 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:22:00,865 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:22:00,865 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:21:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '3266', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3277', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29265', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.469s', 'x-request-id': 'req_19af5559ee5c49eb9fafe887120a10ae', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b87408a8d569be-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:22:00,865 - openai._base_client - DEBUG - request_id: req_19af5559ee5c49eb9fafe887120a10ae
2025-08-07 10:22:00,870 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_Kq4yTUA25wCa7mWGrObFJmV1', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: 1 validation error for schedule_with_pattern\nself\n  Field required [type=missing, input_value={'user_id': '33a07e45-c5a...00,2025-08-15T18:00:00'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_Kq4yTUA25wCa7mWGrObFJmV1'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:22:00,871 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:22:00,871 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:22:00,871 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:22:00,872 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:22:00,872 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:22:00,872 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:22:03,742 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:22:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2729'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2745'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29329'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.342s'), (b'x-request-id', b'req_e42bc38c26794641a0462d7d4c23e8cc'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8741e0d8369be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:22:03,742 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:22:03,742 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:22:03,742 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:22:03,742 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:22:03,742 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:22:03,742 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:22:02 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2729', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2745', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29329', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.342s', 'x-request-id': 'req_e42bc38c26794641a0462d7d4c23e8cc', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8741e0d8369be-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:22:03,743 - openai._base_client - DEBUG - request_id: req_e42bc38c26794641a0462d7d4c23e8cc
2025-08-07 10:22:03,750 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:21 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_Kq4yTUA25wCa7mWGrObFJmV1', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: 1 validation error for schedule_with_pattern\nself\n  Field required [type=missing, input_value={'user_id': '33a07e45-c5a...00,2025-08-15T18:00:00'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_Kq4yTUA25wCa7mWGrObFJmV1'}, {'content': 'It seems there was an error with scheduling the meeting. Let me try that again for you.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_2B1jhyWR0o90L4g1OtW2kHKy', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"self": {}, "user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': 'Error: TypeError("StructuredTool._run() got multiple values for argument \'self\'")\n Please fix your mistakes.', 'role': 'tool', 'tool_call_id': 'call_2B1jhyWR0o90L4g1OtW2kHKy'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['self', 'user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'self': {}, 'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['self', 'user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:22:03,750 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:22:03,750 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:22:03,751 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:22:03,751 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:22:03,752 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:22:03,752 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:22:05,454 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:22:04 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1538'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1555'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29279'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.442s'), (b'x-request-id', b'req_1ad3ac8d94ac478aa05d36c90d24e4f9'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b874301f5c69be-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:22:05,454 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:22:05,455 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:22:05,455 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:22:05,455 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:22:05,455 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:22:05,455 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:22:04 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1538', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1555', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29279', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.442s', 'x-request-id': 'req_1ad3ac8d94ac478aa05d36c90d24e4f9', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b874301f5c69be-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:22:05,456 - openai._base_client - DEBUG - request_id: req_1ad3ac8d94ac478aa05d36c90d24e4f9
2025-08-07 10:22:05,519 - httpcore.connection - DEBUG - close.started
2025-08-07 10:22:05,520 - httpcore.connection - DEBUG - close.complete
2025-08-07 10:38:08,636 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:38:08,648 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:38:08,844 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:38:08,844 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:38:09,019 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:38:09,020 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:38:09,197 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:38:09,198 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:38:09,427 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:09,732 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:09,732 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-08-07 10:38:09,788 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BE6BAC69F0>
2025-08-07 10:38:09,788 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001BE6BD2EAD0> server_hostname='api.openai.com' timeout=None
2025-08-07 10:38:09,847 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BE6BAC6960>
2025-08-07 10:38:09,848 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:09,848 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:09,848 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:09,848 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:09,848 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:10,877 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'832'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'890'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29396'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.208s'), (b'x-request-id', b'req_dadfec01d48d47a4a7e88ff63bb6b8d8'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=dMDB6aiGHavj2kRWcgfFE02J8yWMFtJdKdEd1BRMNOI-1754588289-1.0.1.1-N9mxwcYa5CgYG_zTp_H8T_bAG8W1tYMg0dtAU5LUnhKPrPgJ39v4ptYd_tsXO_IxsLNHnRgiHg5eQli91IBNg9UKwQZRVXi0BXJ2vIwRY_Y; path=/; expires=Thu, 07-Aug-25 18:08:09 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=mr60H65zUJOTnxh8h2bR0HUgb1CM8FFvo13zb8ssJOQ-1754588289982-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88bc62a572a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:10,877 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:10,877 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:10,878 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:10,878 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:10,878 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:10,878 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Thu, 07 Aug 2025 17:38:09 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'hp61'), ('openai-processing-ms', '832'), ('openai-project', 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '890'), ('x-ratelimit-limit-requests', '500'), ('x-ratelimit-limit-tokens', '30000'), ('x-ratelimit-remaining-requests', '499'), ('x-ratelimit-remaining-tokens', '29396'), ('x-ratelimit-reset-requests', '120ms'), ('x-ratelimit-reset-tokens', '1.208s'), ('x-request-id', 'req_dadfec01d48d47a4a7e88ff63bb6b8d8'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=dMDB6aiGHavj2kRWcgfFE02J8yWMFtJdKdEd1BRMNOI-1754588289-1.0.1.1-N9mxwcYa5CgYG_zTp_H8T_bAG8W1tYMg0dtAU5LUnhKPrPgJ39v4ptYd_tsXO_IxsLNHnRgiHg5eQli91IBNg9UKwQZRVXi0BXJ2vIwRY_Y; path=/; expires=Thu, 07-Aug-25 18:08:09 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=mr60H65zUJOTnxh8h2bR0HUgb1CM8FFvo13zb8ssJOQ-1754588289982-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '96b88bc62a572a94-LAX'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-08-07 10:38:10,878 - openai._base_client - DEBUG - request_id: req_dadfec01d48d47a4a7e88ff63bb6b8d8
2025-08-07 10:38:10,889 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_yQPhYi76MKbnIYSENtD4JGQ5', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_yQPhYi76MKbnIYSENtD4JGQ5'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:10,889 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:10,890 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:10,890 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:10,890 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:10,890 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:10,890 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:12,618 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1502'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1574'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29300'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.399s'), (b'x-request-id', b'req_c440ec4a419e4e0e84b6e4d5ebcbadd7'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88bcca9112a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:12,618 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:12,618 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:12,621 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:12,621 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:12,621 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:12,621 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1502', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1574', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29300', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.399s', 'x-request-id': 'req_c440ec4a419e4e0e84b6e4d5ebcbadd7', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88bcca9112a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:12,621 - openai._base_client - DEBUG - request_id: req_c440ec4a419e4e0e84b6e4d5ebcbadd7
2025-08-07 10:38:12,626 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_yQPhYi76MKbnIYSENtD4JGQ5', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_yQPhYi76MKbnIYSENtD4JGQ5'}, {'content': 'It seems there was an issue with storing your preference. Let me try that again.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_QSoE5L5L6C2dS7MW6peDnBGO', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_QSoE5L5L6C2dS7MW6peDnBGO'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:12,627 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:12,627 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:12,627 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:12,627 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:12,627 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:12,628 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:14,584 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1782'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1866'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29319'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.362s'), (b'x-request-id', b'req_561a97454697458fbf1c1ad60d5e79d9'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88bd78ba72a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:14,584 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:14,584 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:14,588 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:14,588 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:14,588 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:14,588 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1782', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1866', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29319', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.362s', 'x-request-id': 'req_561a97454697458fbf1c1ad60d5e79d9', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88bd78ba72a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:14,588 - openai._base_client - DEBUG - request_id: req_561a97454697458fbf1c1ad60d5e79d9
2025-08-07 10:38:17,611 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:17,611 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:17,612 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:17,612 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:17,612 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:17,612 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:17,612 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:19,667 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1890'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1942'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28925'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.148s'), (b'x-request-id', b'req_a1f59f5607224870b1dda8a6ba4dd9b4'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88bf6ab4d2a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:19,668 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:19,668 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:19,668 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:19,668 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:19,668 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:19,668 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1890', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1942', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28925', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.148s', 'x-request-id': 'req_a1f59f5607224870b1dda8a6ba4dd9b4', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88bf6ab4d2a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:19,668 - openai._base_client - DEBUG - request_id: req_a1f59f5607224870b1dda8a6ba4dd9b4
2025-08-07 10:38:19,673 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_ETrUPsWxtmEcH8SewOhuk8NV', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00", "category": "Task"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_ETrUPsWxtmEcH8SewOhuk8NV'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:19,674 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:19,674 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:19,674 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:19,674 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:19,674 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:19,674 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:22,135 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2320'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2371'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28556'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.886s'), (b'x-request-id', b'req_9fb05c7a719545f781ac95ff88c82470'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88c0389782a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:22,135 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:22,135 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:22,137 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:22,137 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:22,137 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:22,137 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:21 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2320', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2371', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28556', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.886s', 'x-request-id': 'req_9fb05c7a719545f781ac95ff88c82470', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88c0389782a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:22,137 - openai._base_client - DEBUG - request_id: req_9fb05c7a719545f781ac95ff88c82470
2025-08-07 10:38:22,142 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_ETrUPsWxtmEcH8SewOhuk8NV', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00", "category": "Task"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_ETrUPsWxtmEcH8SewOhuk8NV'}, {'content': 'It seems there was an error in scheduling the deep work session. Let me try that again for you.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_bn5arm4z9l3fJt6200dLhuyC', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00", "category": "Task"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_bn5arm4z9l3fJt6200dLhuyC'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:22,144 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:22,144 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:22,144 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:22,144 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:22,144 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:22,144 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:25,604 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'3345'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3356'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28231'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'3.537s'), (b'x-request-id', b'req_0304395ce2b04492a9b73c1003a89620'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88c12ffea2a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:25,605 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:25,605 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:25,610 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:25,610 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:25,610 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:25,610 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '3345', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3356', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28231', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '3.537s', 'x-request-id': 'req_0304395ce2b04492a9b73c1003a89620', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88c12ffea2a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:25,610 - openai._base_client - DEBUG - request_id: req_0304395ce2b04492a9b73c1003a89620
2025-08-07 10:38:25,616 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_ETrUPsWxtmEcH8SewOhuk8NV', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00", "category": "Task"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_ETrUPsWxtmEcH8SewOhuk8NV'}, {'content': 'It seems there was an error in scheduling the deep work session. Let me try that again for you.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_bn5arm4z9l3fJt6200dLhuyC', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00", "category": "Task"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_bn5arm4z9l3fJt6200dLhuyC'}, {'content': "I'm currently experiencing some technical difficulties with scheduling the deep work session. I will attempt to resolve this issue and ensure your request is processed. Please bear with me for a moment.", 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_zGGxBgvbMpR4UY9GzRgw0R1g', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00", "category": "Task"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_zGGxBgvbMpR4UY9GzRgw0R1g'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:25,617 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:25,617 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:25,618 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:25,618 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:25,618 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:25,618 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:26,797 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1053'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1067'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28247'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'3.505s'), (b'x-request-id', b'req_17abf3f2737d42dcacf86b525674bf4f'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88c28bdb42a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:26,797 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:26,797 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:26,798 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:26,798 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:26,798 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:26,798 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1053', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1067', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28247', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '3.505s', 'x-request-id': 'req_17abf3f2737d42dcacf86b525674bf4f', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88c28bdb42a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:26,798 - openai._base_client - DEBUG - request_id: req_17abf3f2737d42dcacf86b525674bf4f
2025-08-07 10:38:29,822 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:29,823 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:29,823 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:29,823 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:29,824 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:29,824 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:29,824 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:32,868 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2872'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2899'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28881'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.237s'), (b'x-request-id', b'req_ef48019adcde4051a287ee45a949dafe'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88c42ff792a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:32,869 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:32,869 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:32,870 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:32,870 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:32,870 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:32,870 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2872', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2899', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28881', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.237s', 'x-request-id': 'req_ef48019adcde4051a287ee45a949dafe', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88c42ff792a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:32,870 - openai._base_client - DEBUG - request_id: req_ef48019adcde4051a287ee45a949dafe
2025-08-07 10:38:32,875 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_BHtQVJOXaIWhHzHrwbRYodQ7', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_BHtQVJOXaIWhHzHrwbRYodQ7'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:32,876 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:32,877 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:32,877 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:32,877 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:32,877 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:32,877 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:35,135 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2071'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2086'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28622'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.754s'), (b'x-request-id', b'req_501773bfe3d94141bbdd64d63882a5ef'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88c56092e2a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:35,135 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:35,136 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:35,141 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:35,141 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:35,141 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:35,141 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2071', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2086', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28622', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.754s', 'x-request-id': 'req_501773bfe3d94141bbdd64d63882a5ef', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88c56092e2a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:35,142 - openai._base_client - DEBUG - request_id: req_501773bfe3d94141bbdd64d63882a5ef
2025-08-07 10:38:35,147 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:38 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_BHtQVJOXaIWhHzHrwbRYodQ7', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_BHtQVJOXaIWhHzHrwbRYodQ7'}, {'content': 'It seems there was an error with scheduling the meeting. Let me try that again for you.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_uqiKeezY1qst2pmwnrysSDWn', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_uqiKeezY1qst2pmwnrysSDWn'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:38:35,148 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:38:35,148 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:38:35,148 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:38:35,148 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:38:35,148 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:38:35,149 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:38:36,292 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:38:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'932'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1009'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29322'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.356s'), (b'x-request-id', b'req_2a5ec97f4ddb47b7b2b1c89f52b2172c'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b88c644f832a94-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:38:36,292 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:38:36,292 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:38:36,312 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:38:36,312 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:38:36,312 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:38:36,312 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 17:38:35 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '932', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1009', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29322', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.356s', 'x-request-id': 'req_2a5ec97f4ddb47b7b2b1c89f52b2172c', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b88c644f832a94-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 10:38:36,312 - openai._base_client - DEBUG - request_id: req_2a5ec97f4ddb47b7b2b1c89f52b2172c
2025-08-07 10:38:36,383 - httpcore.connection - DEBUG - close.started
2025-08-07 10:38:36,388 - httpcore.connection - DEBUG - close.complete
2025-08-07 10:59:57,143 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:59:57,156 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:59:57,354 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 10:59:57,354 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 10:59:57,590 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:59 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:59:57,891 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:59:57,891 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-08-07 10:59:57,941 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000239888E3E60>
2025-08-07 10:59:57,941 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000023988B43950> server_hostname='api.openai.com' timeout=None
2025-08-07 10:59:57,982 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000239888E3BC0>
2025-08-07 10:59:57,982 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:59:57,983 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:59:57,983 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:59:57,983 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:59:57,983 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 10:59:59,169 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 17:59:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1009'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1059'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29396'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.208s'), (b'x-request-id', b'req_e18765a0bd864a2c9356d7c1b31aef63'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=dRdJRTGhdt0iD_DUeKLuh.Mo7IaPswQG_Pm15_2oSBo-1754589598-1.0.1.1-a2OaonEjZ8rlWv4N7DcVxnLMh4FNOsU8KlHhrCBnmWG8A1OtGZvqLODqQJJL8LAVjux2NqF_JG9aDm9SKMZljSHaHeQyFa1Yb_bgT7R.Kt4; path=/; expires=Thu, 07-Aug-25 18:29:58 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=v1Jxm_4PjffMj7WSkfjZ8dyDGzkSUHB5j0O9Xx.skm0-1754589598277-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8abb60ae7f7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 10:59:59,170 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 10:59:59,170 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 10:59:59,171 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 10:59:59,171 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 10:59:59,171 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 10:59:59,171 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Thu, 07 Aug 2025 17:59:58 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'hp61'), ('openai-processing-ms', '1009'), ('openai-project', 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1059'), ('x-ratelimit-limit-requests', '500'), ('x-ratelimit-limit-tokens', '30000'), ('x-ratelimit-remaining-requests', '499'), ('x-ratelimit-remaining-tokens', '29396'), ('x-ratelimit-reset-requests', '120ms'), ('x-ratelimit-reset-tokens', '1.208s'), ('x-request-id', 'req_e18765a0bd864a2c9356d7c1b31aef63'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=dRdJRTGhdt0iD_DUeKLuh.Mo7IaPswQG_Pm15_2oSBo-1754589598-1.0.1.1-a2OaonEjZ8rlWv4N7DcVxnLMh4FNOsU8KlHhrCBnmWG8A1OtGZvqLODqQJJL8LAVjux2NqF_JG9aDm9SKMZljSHaHeQyFa1Yb_bgT7R.Kt4; path=/; expires=Thu, 07-Aug-25 18:29:58 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=v1Jxm_4PjffMj7WSkfjZ8dyDGzkSUHB5j0O9Xx.skm0-1754589598277-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '96b8abb60ae7f7b3-LAX'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-08-07 10:59:59,171 - openai._base_client - DEBUG - request_id: req_e18765a0bd864a2c9356d7c1b31aef63
2025-08-07 10:59:59,181 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:59 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_l3sQ5h9EGdQUoDPV8Bp9y8WK', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_l3sQ5h9EGdQUoDPV8Bp9y8WK'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 10:59:59,182 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 10:59:59,182 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 10:59:59,182 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 10:59:59,182 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 10:59:59,183 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 10:59:59,183 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:00:01,421 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:00:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2099'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2124'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28599'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.801s'), (b'x-request-id', b'req_b002b4aaa3504ae684e3b0a7cdda6b18'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8abbd7e33f7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:00:01,422 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:00:01,422 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:00:01,428 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:00:01,428 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:00:01,428 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:00:01,428 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:00:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2099', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2124', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28599', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.801s', 'x-request-id': 'req_b002b4aaa3504ae684e3b0a7cdda6b18', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8abbd7e33f7b3-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:00:01,428 - openai._base_client - DEBUG - request_id: req_b002b4aaa3504ae684e3b0a7cdda6b18
2025-08-07 11:00:01,434 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 10:59 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_l3sQ5h9EGdQUoDPV8Bp9y8WK', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_l3sQ5h9EGdQUoDPV8Bp9y8WK'}, {'content': 'It seems there was an issue with storing your preferences. Let me try that again.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_esT3pCmJIkWvUK16TdyrSrWf', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_esT3pCmJIkWvUK16TdyrSrWf'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:00:01,435 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:00:01,435 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:00:01,436 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:00:01,436 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:00:01,436 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:00:01,436 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:00:03,966 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:00:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2307'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2414'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29319'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.362s'), (b'x-request-id', b'req_195ec88e913d4902929c1907e9b5a708'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8abcb8b0cf7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:00:03,967 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:00:03,967 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:00:03,967 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:00:03,967 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:00:03,967 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:00:03,967 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:00:03 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2307', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2414', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29319', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.362s', 'x-request-id': 'req_195ec88e913d4902929c1907e9b5a708', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8abcb8b0cf7b3-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:00:03,968 - openai._base_client - DEBUG - request_id: req_195ec88e913d4902929c1907e9b5a708
2025-08-07 11:00:06,998 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:00 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:00:06,999 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:00:06,999 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:00:06,999 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:00:06,999 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:00:07,000 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:00:07,000 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:00:09,388 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:00:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2238'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2254'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29396'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.208s'), (b'x-request-id', b'req_80481818d1b448e08aa790da1554e4d4'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8abee5af5f7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:00:09,388 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:00:09,389 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:00:09,392 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:00:09,393 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:00:09,393 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:00:09,393 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:00:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2238', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2254', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29396', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.208s', 'x-request-id': 'req_80481818d1b448e08aa790da1554e4d4', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8abee5af5f7b3-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:00:09,393 - openai._base_client - DEBUG - request_id: req_80481818d1b448e08aa790da1554e4d4
2025-08-07 11:00:09,400 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:00 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_0X24skDgkJHx6d6xdlkQ218a', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Deep Work Session", "duration": 2, "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_0X24skDgkJHx6d6xdlkQ218a'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:00:09,401 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:00:09,401 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:00:09,401 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:00:09,401 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:00:09,401 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:00:09,401 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:00:12,243 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:00:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2677'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2749'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28699'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.601s'), (b'x-request-id', b'req_747f367edf164d93a9862736a7cf394d'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8abfd5a8df7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:00:12,244 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:00:12,244 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:00:12,244 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:00:12,245 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:00:12,245 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:00:12,245 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:00:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2677', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2749', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28699', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.601s', 'x-request-id': 'req_747f367edf164d93a9862736a7cf394d', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8abfd5a8df7b3-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:00:12,245 - openai._base_client - DEBUG - request_id: req_747f367edf164d93a9862736a7cf394d
2025-08-07 11:00:12,254 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:00 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_0X24skDgkJHx6d6xdlkQ218a', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Deep Work Session", "duration": 2, "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_0X24skDgkJHx6d6xdlkQ218a'}, {'content': 'It seems there was an issue with scheduling the deep work session. Let me try that again for you.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_VQkERbmyknrbVy4cNUFXM6kQ', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Deep Work Session", "duration": 2, "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_VQkERbmyknrbVy4cNUFXM6kQ'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:00:12,255 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:00:12,256 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:00:12,257 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:00:12,257 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:00:12,257 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:00:12,257 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:00:15,203 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:00:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2745'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2827'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29315'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.37s'), (b'x-request-id', b'req_ae82c1579c2a4bb3b4aa27610d96ed9a'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8ac0f3842f7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:00:15,204 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:00:15,204 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:00:15,215 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:00:15,215 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:00:15,215 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:00:15,215 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:00:14 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2745', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2827', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29315', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.37s', 'x-request-id': 'req_ae82c1579c2a4bb3b4aa27610d96ed9a', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8ac0f3842f7b3-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:00:15,216 - openai._base_client - DEBUG - request_id: req_ae82c1579c2a4bb3b4aa27610d96ed9a
2025-08-07 11:00:18,243 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:00 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:00:18,245 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:00:18,245 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:00:18,245 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:00:18,245 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:00:18,245 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:00:18,245 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:00:23,569 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:00:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'5021'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5183'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29400'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.2s'), (b'x-request-id', b'req_0d393812865e4c438463b7f29e4b0447'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8ac349ef2f7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:00:23,570 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:00:23,571 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:00:23,571 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:00:23,571 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:00:23,571 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:00:23,571 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:00:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '5021', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5183', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29400', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.2s', 'x-request-id': 'req_0d393812865e4c438463b7f29e4b0447', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8ac349ef2f7b3-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:00:23,571 - openai._base_client - DEBUG - request_id: req_0d393812865e4c438463b7f29e4b0447
2025-08-07 11:00:23,577 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:00 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_QV8x3qAxmbHIdOavuqEcZq7d', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_QV8x3qAxmbHIdOavuqEcZq7d'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:00:23,578 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:00:23,578 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:00:23,579 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:00:23,579 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:00:23,579 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:00:23,579 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:00:28,504 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:00:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'4782'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4843'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28605'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.788s'), (b'x-request-id', b'req_8febc8756ed344fdb4c100494e49411e'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8ac55eb95f7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:00:28,505 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:00:28,505 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:00:28,507 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:00:28,507 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:00:28,508 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:00:28,508 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:00:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '4782', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4843', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28605', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.788s', 'x-request-id': 'req_8febc8756ed344fdb4c100494e49411e', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8ac55eb95f7b3-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:00:28,508 - openai._base_client - DEBUG - request_id: req_8febc8756ed344fdb4c100494e49411e
2025-08-07 11:00:28,515 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:00 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_QV8x3qAxmbHIdOavuqEcZq7d', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_QV8x3qAxmbHIdOavuqEcZq7d'}, {'content': 'It seems there was an issue with scheduling the meeting. Let me try that again for you.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_H8hWEKYLvCrq2oJNgNNGljvT', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_H8hWEKYLvCrq2oJNgNNGljvT'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:00:28,516 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:00:28,516 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:00:28,516 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:00:28,516 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:00:28,516 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:00:28,516 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:00:31,547 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:00:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2896'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2925'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29322'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.356s'), (b'x-request-id', b'req_2a7798ebd0334dc09d554f642aa77ef1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8ac74ddc7f7b3-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:00:31,548 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:00:31,548 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:00:31,558 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:00:31,559 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:00:31,559 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:00:31,559 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:00:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2896', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2925', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29322', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.356s', 'x-request-id': 'req_2a7798ebd0334dc09d554f642aa77ef1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8ac74ddc7f7b3-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:00:31,559 - openai._base_client - DEBUG - request_id: req_2a7798ebd0334dc09d554f642aa77ef1
2025-08-07 11:00:31,661 - httpcore.connection - DEBUG - close.started
2025-08-07 11:00:31,662 - httpcore.connection - DEBUG - close.complete
2025-08-07 11:26:00,927 - scheduler_mcp - INFO - Scheduler MCP server initializing with log level: INFO
2025-08-07 11:26:00,930 - mcp.server.lowlevel.server - DEBUG - Initializing server 'scheduler'
2025-08-07 11:26:00,931 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-07 11:26:00,931 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-07 11:26:00,931 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-07 11:26:00,931 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-07 11:26:00,931 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-07 11:26:00,932 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-07 11:26:00,932 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-07 11:26:00,935 - scheduler_mcp - INFO - Scheduler MCP server initialized
2025-08-07 11:26:00,965 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 11:26:00,981 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 11:26:01,199 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 11:26:01,200 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 11:26:01,396 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 11:26:01,396 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 11:26:01,594 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-08-07 11:26:01,594 - httpx - DEBUG - load_verify_locations cafile='C:\\Users\\ran\\AppData\\Roaming\\Python\\Python312\\site-packages\\certifi\\cacert.pem'
2025-08-07 11:26:01,793 - scheduler_mcp - INFO - Scheduler service instance obtained
2025-08-07 11:26:01,799 - mem0_mcp - INFO - Mem0 MCP server initializing with log level: INFO
2025-08-07 11:26:01,801 - mcp.server.lowlevel.server - DEBUG - Initializing server 'mem0'
2025-08-07 11:26:01,802 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest
2025-08-07 11:26:01,802 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest
2025-08-07 11:26:01,802 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest
2025-08-07 11:26:01,802 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest
2025-08-07 11:26:01,802 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest
2025-08-07 11:26:01,802 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest
2025-08-07 11:26:01,802 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest
2025-08-07 11:26:01,802 - mem0_mcp - INFO - Mem0 MCP server initialized
2025-08-07 11:26:01,812 - mem0_mcp - INFO - Mem0 service instance obtained
2025-08-07 11:26:01,855 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:02,180 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:02,180 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-08-07 11:26:02,248 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001D7936E0410>
2025-08-07 11:26:02,248 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001D7936D3950> server_hostname='api.openai.com' timeout=None
2025-08-07 11:26:02,307 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001D7936E0170>
2025-08-07 11:26:02,308 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:02,308 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:02,308 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:02,308 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:02,309 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:03,750 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1204'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1283'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29396'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.208s'), (b'x-request-id', b'req_ef3c4d4e0ddb463ea2391b9ddc65cb82'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=AH_bcf2kMOEYFui2qOoaELl8FyiXcK40gT7LI0A7pH4-1754591162-1.0.1.1-jF9yS96nTaQQkaSe2Z40nIRxqjgY_CUBO2Yw0nAmUI1urb4OmnYzMvQVmcN3Pf4dPHvuwq8WhicNp7qYFvrWacWklD0.bIU9pgOPcgSlMj8; path=/; expires=Thu, 07-Aug-25 18:56:02 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=GpYIFYW8qHDjEkfcz6X1.4oPgutcPmu8Riy6ag0C58E-1754591162835-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d1e709d50fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:03,751 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:03,751 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:03,753 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:03,753 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:03,753 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:03,753 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Thu, 07 Aug 2025 18:26:02 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'hp61'), ('openai-processing-ms', '1204'), ('openai-project', 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1283'), ('x-ratelimit-limit-requests', '500'), ('x-ratelimit-limit-tokens', '30000'), ('x-ratelimit-remaining-requests', '499'), ('x-ratelimit-remaining-tokens', '29396'), ('x-ratelimit-reset-requests', '120ms'), ('x-ratelimit-reset-tokens', '1.208s'), ('x-request-id', 'req_ef3c4d4e0ddb463ea2391b9ddc65cb82'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=AH_bcf2kMOEYFui2qOoaELl8FyiXcK40gT7LI0A7pH4-1754591162-1.0.1.1-jF9yS96nTaQQkaSe2Z40nIRxqjgY_CUBO2Yw0nAmUI1urb4OmnYzMvQVmcN3Pf4dPHvuwq8WhicNp7qYFvrWacWklD0.bIU9pgOPcgSlMj8; path=/; expires=Thu, 07-Aug-25 18:56:02 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=GpYIFYW8qHDjEkfcz6X1.4oPgutcPmu8Riy6ag0C58E-1754591162835-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '96b8d1e709d50fcb-LAX'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-08-07 11:26:03,753 - openai._base_client - DEBUG - request_id: req_ef3c4d4e0ddb463ea2391b9ddc65cb82
2025-08-07 11:26:03,772 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_AwpqwU4wyYwmVCdApP0WyU22', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_AwpqwU4wyYwmVCdApP0WyU22'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:03,774 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:03,774 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:03,774 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:03,775 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:03,775 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:03,775 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:06,996 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2403'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3065'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29044'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.91s'), (b'x-request-id', b'req_9afc80f151f447408524c32df2760240'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d1f03a540fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:06,996 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:06,996 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:07,005 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:07,005 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:07,005 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:07,005 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:26:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2403', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3065', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29044', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.91s', 'x-request-id': 'req_9afc80f151f447408524c32df2760240', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8d1f03a540fcb-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:26:07,006 - openai._base_client - DEBUG - request_id: req_9afc80f151f447408524c32df2760240
2025-08-07 11:26:07,011 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': "[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] I'm a morning person and work best between 9 AM and 11 AM", 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_AwpqwU4wyYwmVCdApP0WyU22', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_AwpqwU4wyYwmVCdApP0WyU22'}, {'content': 'It seems there was an error while trying to store your preference. Let me try that again.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_2gDfQoa1UvgrcqAxqmwvOv1x', 'function': {'name': 'extract_and_store_text_insights', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "text_content": "I\'m a morning person and work best between 9 AM and 11 AM"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_2gDfQoa1UvgrcqAxqmwvOv1x'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:07,012 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:07,012 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:07,012 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:07,012 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:07,012 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:07,013 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:09,053 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1329'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1873'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28852'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.294s'), (b'x-request-id', b'req_5be4e51273c5427890da223c49d72841'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d2046d0f0fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:09,053 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:09,053 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:09,054 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:09,054 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:09,054 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:09,054 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:26:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1329', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1873', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28852', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.294s', 'x-request-id': 'req_5be4e51273c5427890da223c49d72841', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8d2046d0f0fcb-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:26:09,055 - openai._base_client - DEBUG - request_id: req_5be4e51273c5427890da223c49d72841
2025-08-07 11:26:12,079 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:12,080 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:12,080 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:12,080 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:12,080 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:12,081 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:12,081 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:13,551 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:12 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1285'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1345'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29396'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.208s'), (b'x-request-id', b'req_6494d85a7e8145d882f07e9826ebe1e3'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d22419080fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:13,551 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:13,552 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:13,563 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:13,563 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:13,563 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:13,563 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:26:12 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1285', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1345', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29396', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.208s', 'x-request-id': 'req_6494d85a7e8145d882f07e9826ebe1e3', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8d22419080fcb-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:26:13,563 - openai._base_client - DEBUG - request_id: req_6494d85a7e8145d882f07e9826ebe1e3
2025-08-07 11:26:13,569 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_XAZyR2MuizdefCP9EQNafnqk', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_XAZyR2MuizdefCP9EQNafnqk'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:13,569 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:13,570 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:13,570 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:13,570 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:13,570 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:13,570 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:15,641 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1904'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1922'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28695'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.608s'), (b'x-request-id', b'req_42310400273c430f9c8239cbff0792a7'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d22d6a940fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:15,641 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:15,641 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:15,641 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:15,641 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:15,642 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:15,642 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:26:14 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1904', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1922', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28695', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.608s', 'x-request-id': 'req_42310400273c430f9c8239cbff0792a7', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8d22d6a940fcb-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:26:15,642 - openai._base_client - DEBUG - request_id: req_42310400273c430f9c8239cbff0792a7
2025-08-07 11:26:15,646 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a 2-hour deep work session for tomorrow morning', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_XAZyR2MuizdefCP9EQNafnqk', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_XAZyR2MuizdefCP9EQNafnqk'}, {'content': 'It seems there was an issue with scheduling the deep work session. Let me try that again for you.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_wiIN5OQqHfIFNWEAPE8x8DjF', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "duration": 2, "summary": "Deep Work Session", "available_periods": "2025-08-08T09:00:00,2025-08-08T12:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_wiIN5OQqHfIFNWEAPE8x8DjF'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:15,647 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:15,647 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:15,648 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:15,648 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:15,648 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:15,649 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:17,239 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1421'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1485'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28200'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'3.599s'), (b'x-request-id', b'req_33e79482eeca49a0beb4dc0133283dcc'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d23a6d7c0fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:17,240 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:17,240 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:17,243 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:17,243 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:17,243 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:17,243 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:26:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1421', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1485', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28200', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '3.599s', 'x-request-id': 'req_33e79482eeca49a0beb4dc0133283dcc', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8d23a6d7c0fcb-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:26:17,243 - openai._base_client - DEBUG - request_id: req_33e79482eeca49a0beb4dc0133283dcc
2025-08-07 11:26:20,271 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:20,273 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:20,273 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:20,273 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:20,273 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:20,274 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:20,274 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:22,663 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2203'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2231'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29023'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'1.952s'), (b'x-request-id', b'req_c33eb0146bc4479bb1ee0301ba429277'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d2574d8f0fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:22,663 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:22,663 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:22,668 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:22,668 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:22,668 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:22,668 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:26:21 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2203', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2231', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '29023', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '1.952s', 'x-request-id': 'req_c33eb0146bc4479bb1ee0301ba429277', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8d2574d8f0fcb-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:26:22,668 - openai._base_client - DEBUG - request_id: req_c33eb0146bc4479bb1ee0301ba429277
2025-08-07 11:26:22,673 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_yyT9rbYVtPdAlrcRNQ4b0rxt', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "category": "Event", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_yyT9rbYVtPdAlrcRNQ4b0rxt'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:22,674 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:22,674 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:22,674 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:22,674 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:22,675 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:22,675 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:25,499 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'2639'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2717'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28618'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'2.762s'), (b'x-request-id', b'req_7167783da697408085ecc4ff45244502'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d2665ad10fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:25,500 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:25,500 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:25,502 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:25,502 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:25,502 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:25,502 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:26:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '2639', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2717', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28618', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '2.762s', 'x-request-id': 'req_7167783da697408085ecc4ff45244502', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8d2665ad10fcb-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:26:25,502 - openai._base_client - DEBUG - request_id: req_7167783da697408085ecc4ff45244502
2025-08-07 11:26:25,508 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert AI scheduling assistant.\n\n## CURRENT CONTEXT\nToday is: Thursday, August 07, 2025\nCurrent time: 11:26 AM\nUse this information when interpreting relative time references like "tomorrow", "next week", "this afternoon", etc.\n\n## Core Directive - React Agent Pattern\nFor every user input, you MUST follow this sequence precisely:\n\n1. **ANALYZE INTENT:** Determine if the user wants to:\n   - Schedule/create an event or task ¡ú Use schedule_with_pattern\n   - Share preferences, habits, or insights ¡ú Use extract_and_store_text_insights  \n\n2. **EXECUTE TOOLS:** Call the appropriate tool(s) based on intent analysis\n   - For scheduling: Extract duration, importance, time preferences, deadlines\n   - For preferences: Store ANY non-scheduling information (habits, energy, context)\n\n3. **RESPOND:** Provide helpful, conversational responses based on tool results\n\n## Tool Usage Guidelines\n\n**schedule_with_pattern:** Use for direct scheduling requests\n- "Schedule a meeting tomorrow" ¡ú Calculate exact date based on current date\n- "I need to work on my project for 2 hours" ¡ú Use duration parameter\n- "Book gym session at 7 AM" ¡ú Convert to specific time\n- "Schedule something next week" ¡ú Use available_periods to specify the week range\n\n**available_periods Parameter Format:**\nWhen users mention specific time ranges, use the available_periods parameter with format:\n"start1,end1;start2,end2" where dates are ISO 8601 format.\nExamples:\n- "next week" ¡ú "2024-01-15T09:00:00,2024-01-15T18:00:00;2024-01-16T09:00:00,2024-01-16T18:00:00;..." (all weekdays)\n- "tomorrow morning" ¡ú "2024-01-15T09:00:00,2024-01-15T12:00:00"\n- "this afternoon" ¡ú "2024-01-14T13:00:00,2024-01-14T17:00:00"\n\n**extract_and_store_text_insights:** Use for preferences and non-scheduling info  \n- "I\'m a morning person"\n- "I hate working late"\n- "I\'m feeling stressed about deadlines"\n- "I prefer quiet environments for deep work"\n\n## Response Style\n- Be conversational and helpful\n- Explain your reasoning when scheduling\n- Ask clarifying questions when needed\n- Acknowledge stored preferences\n- Always consider the current date/time when interpreting relative references\n\nNote: The scheduling system automatically retrieves your stored preferences and patterns to make optimal scheduling decisions.', 'role': 'system'}, {'content': '[User ID: 33a07e45-c5a8-4b95-9e39-c12752012e36] Schedule a meeting for next week sometime', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_yyT9rbYVtPdAlrcRNQ4b0rxt', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "category": "Event", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_yyT9rbYVtPdAlrcRNQ4b0rxt'}, {'content': 'It seems there was an issue with scheduling the meeting directly. Let me try that again for you.', 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_VfTGmwJ41t2E91EbBx66vyco', 'function': {'name': 'schedule_with_pattern', 'arguments': '{"user_id": "33a07e45-c5a8-4b95-9e39-c12752012e36", "summary": "Meeting", "category": "Event", "available_periods": "2025-08-11T09:00:00,2025-08-11T18:00:00;2025-08-12T09:00:00,2025-08-12T18:00:00;2025-08-13T09:00:00,2025-08-13T18:00:00;2025-08-14T09:00:00,2025-08-14T18:00:00;2025-08-15T09:00:00,2025-08-15T18:00:00"}'}}]}, {'content': "Error: NotImplementedError('StructuredTool does not support sync invocation.')\n Please fix your mistakes.", 'role': 'tool', 'tool_call_id': 'call_VfTGmwJ41t2E91EbBx66vyco'}], 'model': 'gpt-4o', 'n': 1, 'stream': False, 'temperature': 0.3, 'tools': [{'type': 'function', 'function': {'name': 'schedule_with_pattern', 'description': 'Creates a NEW calendar event with the provided details using pattern-based scheduling.\nRoutes to LLM if similarity < 0.4 threshold.\n\nArgs:\n    user_id (str): The user\'s ID to use their specific credentials\n    start (str, optional): Event start time in ISO 8601 format. Defaults to None.\n    end (str, optional): Event end time in ISO 8601 format. Defaults to None.\n    timeZone (str, optional): User timezone as IANA Time Zone name. Defaults to None.\n    summary (str, optional): Short title/description of the event. Defaults to None.\n    description (str, optional): Detailed description of the event. Defaults to None.\n    location (str, optional): Location of the event. Defaults to None.\n    category (str, optional): If user provide a start time or a fixed time, the category will be "Event", \n                  else if no time or only a deadline, the category will be "Task". Defaults to None.\n    duration (float): Duration in hours. Defaults to 1.0.\n    importance_score (float): Task importance 0.0-1.0 (0.0=low priority, 1.0=critical). Defaults to 0.5.\n    deadline (str, optional): Optional deadline in ISO 8601 format. Defaults to None.\n    available_periods (str, optional): Time periods to search within. Format: "start1,end1;start2,end2" \n                  where each date is in ISO 8601 format. Example: "2024-01-15T09:00:00,2024-01-15T17:00:00;2024-01-16T09:00:00,2024-01-16T17:00:00". Defaults to None.\n\nReturns:\n    str: Event ID if successful, or error message if failed', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'start': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'end': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'timeZone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'summary': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'location': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'category': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'duration': {'default': 1.0, 'type': 'number'}, 'importance_score': {'default': 0.5, 'type': 'number'}, 'deadline': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'available_periods': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['user_id'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'extract_and_store_text_insights', 'description': 'LLM-powered extraction and categorization of user content into 4 memory categories.\nStore user preferences, insights, and non-scheduling information using LLM categorization.\n\nArgs:\n    user_id (str): The user\'s unique identifier\n    text_content (str): User\'s statement or preference to store\n    context (str): Context of the conversation. Defaults to "conversation".\n\nReturns:\n    str: Brief message about storage results indicating which categories were updated', 'parameters': {'properties': {'user_id': {'type': 'string'}, 'text_content': {'type': 'string'}, 'context': {'default': 'conversation', 'type': 'string'}}, 'required': ['user_id', 'text_content'], 'type': 'object'}}}]}}
2025-08-07 11:26:25,508 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-08-07 11:26:25,509 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-07 11:26:25,509 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-07 11:26:25,509 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-07 11:26:25,509 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-07 11:26:25,509 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-07 11:26:26,975 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 07 Aug 2025 18:26:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'hp61'), (b'openai-processing-ms', b'1200'), (b'openai-project', b'proj_3xHQ4He4FKkZ2wF7KCoiQeUX'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1247'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'28332'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'3.335s'), (b'x-request-id', b'req_7731c40a3d0244e29e9e6c8f6e84708a'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96b8d27809c20fcb-LAX'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-08-07 11:26:26,975 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-07 11:26:26,975 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-07 11:26:26,976 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-07 11:26:26,976 - httpcore.http11 - DEBUG - response_closed.started
2025-08-07 11:26:26,976 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-07 11:26:26,976 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 07 Aug 2025 18:26:26 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'hp61', 'openai-processing-ms': '1200', 'openai-project': 'proj_3xHQ4He4FKkZ2wF7KCoiQeUX', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1247', 'x-ratelimit-limit-requests': '500', 'x-ratelimit-limit-tokens': '30000', 'x-ratelimit-remaining-requests': '499', 'x-ratelimit-remaining-tokens': '28332', 'x-ratelimit-reset-requests': '120ms', 'x-ratelimit-reset-tokens': '3.335s', 'x-request-id': 'req_7731c40a3d0244e29e9e6c8f6e84708a', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '96b8d27809c20fcb-LAX', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-08-07 11:26:26,976 - openai._base_client - DEBUG - request_id: req_7731c40a3d0244e29e9e6c8f6e84708a
2025-08-07 11:26:27,071 - httpcore.connection - DEBUG - close.started
2025-08-07 11:26:27,072 - httpcore.connection - DEBUG - close.complete
2025-08-07 11:38:43,368 - asyncio - DEBUG - Using proactor: IocpProactor
2025-08-07 11:50:38,504 - asyncio - DEBUG - Using proactor: IocpProactor
2025-08-07 11:50:51,148 - asyncio - ERROR - unhandled exception during asyncio.run() shutdown
task: <Task finished name='Task-22' coro=<load_mcp_tools() done, defined at C:\Users\ran\AppData\Roaming\Python\Python312\site-packages\langchain_mcp_adapters\tools.py:117> exception=UnboundLocalError("cannot access local variable 'tools' where it is not associated with a value")>
Traceback (most recent call last):
  File "C:\Users\ran\AppData\Roaming\Python\Python312\site-packages\langchain_mcp_adapters\tools.py", line 140, in load_mcp_tools
    convert_mcp_tool_to_langchain_tool(session, tool, connection=connection) for tool in tools
                                                                                         ^^^^^
UnboundLocalError: cannot access local variable 'tools' where it is not associated with a value
2025-08-07 13:49:33,307 - asyncio - DEBUG - Using proactor: IocpProactor
